** Inventario: Gestión de las existencias de productos, incluyendo entradas y salidas, y alertas de bajo inventario.

** Proveedores: Administración detallada de proveedores, con historial de compras.

** Compras: Módulo para gestionar las órdenes de compra y recibo de mercancía desde proveedores.

** Ventas: Gestión de ventas, incluyendo la emisión de tickets o facturas, control de caja y registro de pagos (efectivo, tarjeta, etc.).

** Clientes: Gestión de clientes frecuentes o clientes que compren a crédito, para llevar un historial de ventas.

** Reportes: Generar reportes de ventas, inventarios, compras, productos más vendidos, etc.

** Cuentas por Cobrar y Cuentas por Pagar: Módulos para administrar pagos pendientes tanto de clientes como a proveedores.

** Promociones/Descuentos: Herramientas para aplicar descuentos o crear promociones especiales.

** Control de Caja: Cierres de caja, balanceo y reporte diario de las ventas y movimientos.

** Devoluciones: Un módulo para gestionar la devolución de productos.

** Punto de Venta (POS):

Interfaz de venta rápida que incluya escaneo de productos con códigos de barras, impresión de tickets, y opciones de pago diversificadas.
Integración con lectores de códigos de barras y básculas para productos pesados.

** Gestión de Usuarios Avanzada:
Control de acceso granular según roles (ej. cajeros, gerentes, administradores), con auditoría de acciones para mejorar la seguridad.

** Control de Lotes y Fechas de Caducidad:
Gestión de productos con fechas de caducidad y control de lotes, especialmente importante para productos perecederos.

**Precios y Variantes de Productos:
Opción de manejar múltiples precios (mayoreo, menudeo, ofertas).
Administración de variantes de productos (ej. tamaños, colores, etc.).

** Manejo de Costos y Márgenes de Ganancia:
Seguimiento del costo de los productos y el cálculo automático de márgenes de ganancia con base en los precios de venta.

** Módulo de Fidelización:
Programas de lealtad para clientes frecuentes, como puntos o descuentos especiales.

** Integración con Bancos o Pagos Electrónicos:

Integrar pagos con tarjetas, QR o incluso plataformas como PayPal o MercadoPago.

** Multisucursal:
En caso de que pienses expandir el negocio, podrías implementar la funcionalidad para gestionar múltiples sucursales desde un solo sistema.

** Notificaciones y Alertas:
Alertas automáticas por correo o SMS cuando el inventario de un producto esté bajo, cuando haya facturas por pagar o cobros pendientes.

** Integración con Contabilidad:

Exportar o integrar datos de ventas y compras con un software contable para facilitar el cumplimiento fiscal.

**Backup y Seguridad de Datos:
Implementar copias de seguridad automáticas y cifrado de datos para proteger la información.

** Acceso Móvil o Remoto:
Crear una versión móvil o responsive para facilitar la gestión del negocio desde cualquier lugar.


Schema::create('sales', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('customer_id')->nullable();
    $table->decimal('total_amount', 10, 2);
    $table->string('payment_method');
    $table->timestamps();
});

Schema::create('sales_details', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('sale_id');
    $table->unsignedBigInteger('product_id');
    $table->integer('quantity');
    $table->decimal('price', 10, 2);
    $table->decimal('total', 10, 2);
    $table->timestamps();

    $table->foreign('sale_id')->references('id')->on('sales')->onDelete('cascade');
    $table->foreign('product_id')->references('id')->on('products');
});


public function store(Request $request)
{
    DB::beginTransaction();
    try {
        // Crear la venta
        $sale = Sale::create([
            'customer_id' => $request->customer_id,
            'total_amount' => $request->total_amount,
            'payment_method' => $request->payment_method,
        ]);

        // Crear el detalle de venta
        foreach ($request->products as $product) {
            $sale->details()->create([
                'product_id' => $product['id'],
                'quantity' => $product['quantity'],
                'price' => $product['price'],
                'total' => $product['price'] * $product['quantity'],
            ]);

            // Actualizar inventario
            $productModel = Product::find($product['id']);
            $productModel->stock -= $product['quantity'];
            $productModel->save();
        }

        DB::commit();
        return response()->json(['message' => 'Venta registrada con éxito']);
    } catch (\Exception $e) {
        DB::rollBack();
        return response()->json(['error' => 'Error al registrar la venta'], 500);
    }
}
